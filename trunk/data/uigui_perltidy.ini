[%20header]
categories=Styles|Basic Options|Code Indentation Control|Whitespace Control|Comment Controls|Skip Selected Codesections
cfgFileParameterEnding=cr
configFilename=perltidy.cfg
fileTypes=*.pl|*.pm
indenterFileName=perltidy
indenterName=Perltidy
inputFileName=indentinput
inputFileParameter=
outputFileName=indentoutput
outputFileParameter="-o="
parameterOrder=pio
showHelpParameter=-h
stringparaminquotes=false
useCfgFileParameter="-pro="
version=2007-12-05

[Add%20semicolons]
Category=3
Description="<html><dd><p>Setting <strong>-asc</strong> allows perltidy to add any missing optional semicolon at the end of a line which is followed by a closing curly brace on the next line.  This is the default, and may be deactivated with <strong>-nasc</strong> or <strong>--noadd-semicolons</strong>.</p></dd></html>"
EditorType=boolean
TrueFalse=--add-semicolons|
Value=0
ValueDefault=0

[Add%20whitespace]
Category=3
Description="<html><dd><p>Setting this option allows perltidy to add certain whitespace improve code readability.  This is the default. If you do not want any whitespace added, but are willing to have some whitespace deleted, use <strong>-naws</strong>.  (Use <strong>-fws</strong> to leave whitespace completely unchanged).</p></dd></html>"
EditorType=boolean
TrueFalse=--add-whitespace|
Value=0
ValueDefault=0

[Block%20brace%20tightness]
CallName="--block-brace-tightness="
Category=3
Description="<html><p>And finally, curly braces which contain blocks of code are controlled by the parameter <strong>-bbt=n</strong> or <strong>--block-brace-tightness=n</strong> as illustrated in the example below.</p></dd><dd><pre>\n %bf = map { $_ =&gt; -M $_ } grep { /deb$/ } dirents '.'; # -bbt=0 (default)\n %bf = map { $_ =&gt; -M $_ } grep {/deb$/} dirents '.';   # -bbt=1\n %bf = map {$_ =&gt; -M $_} grep {/deb$/} dirents '.';     # -bbt=2</pre></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=2
MinVal=0
Value=1
ValueDefault=1

[Brace%20tightness]
CallName="--brace-tightness="
Category=3
Description="<html><p>Curly braces which do not contain code blocks are controlled by the parameter <strong>-bt=n</strong> or <strong>--brace-tightness=n</strong>.</p></dd><dd><pre>\n $obj-&gt;{ $parsed_sql-&gt;{ 'table' }[0] };    # -bt=0\n $obj-&gt;{ $parsed_sql-&gt;{'table'}[0] };      # -bt=1 (default)\n $obj-&gt;{$parsed_sql-&gt;{'table'}[0]};        # -bt=2</pre></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=2
MinVal=0
Value=1
ValueDefault=1

[Check%20syntax]
Category=1
Description="<html>This flag causes perltidy to run <code>perl -c -T</code> to check syntax of input and output. (To change the flags passed to perl, see the next item, <strong>-pscf</strong>).  The results are written to the <em>.LOG</em> file, which will be saved if an error is detected in the output script.  The output script is not checked if the input script has a syntax error.  Perltidy does its own checking, but this option employs perl to get a ``second opinion''.</p></dd><dd><p>If perl reports errors in the input file, they will not be reported in the error output unless the <strong>--warning-output</strong> flag is given.</p></dd><dd><p>The default is <strong>not</strong> to do this type of syntax checking (although perltidy will still do as much self-checking as possible). The reason is that it causes all code in BEGIN blocks to be executed, for all modules being used, and this opens the door to security issues and infinite loops when running perltidy.</html>"
EditorType=boolean
Enabled=false
TrueFalse=--check-syntax|
Value=0
ValueDefault=0

[Closing%20Side%20Comment%20Else%20Flag]
CallName="--closing-side-comment-else-flag="
Category=4
Description="<html><dd><p>The default, <strong>n=0</strong>, places the text of the opening <code>if</code> statement after any terminal <code>else</code>.</p></dd><dd><p>If <strong>n=2</strong> is used, then each <code>elsif</code> is also given the text of the opening <code>if</code> statement.  Also, an <code>else</code> will include the text of a preceding <code>elsif</code> statement.  Note that this may result some long closing side comments.</p></dd><dd><p>If <strong>n=1</strong> is used, the results will be the same as <strong>n=2</strong> whenever the resulting line length is less than the maximum allowed.</p></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=0
ValueDefault=0

[Closing%20Side%20Comment%20Interval]
CallName="--closing-side-comment-interval="
Category=4
Description="<html><dd><p>where <code>n</code> is the minimum number of lines that a block must have in order for a closing side comment to be added.  The default value is <code>n=6</code>.  To illustrate:</p></dd><dd><pre>\n        # perltidy -csci=2 -csc\n        sub message {\n            if ( !defined( $_[0] ) ) {\n                print(&quot;Hello, World\n&quot;);\n            } ## end if ( !defined( $_[0] ))\n            else {\n                print( $_[0], &quot;\n&quot; );\n            } ## end else [ if ( !defined( $_[0] ))\n        } ## end sub message</pre></dd><dd><p>Now the <code>if</code> and <code>else</code> blocks are commented.  However, now this has become very cluttered.</p></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=6
ValueDefault=6

[Closing%20Side%20Comment%20List]
CallName="--closing-side-comment-list="
Category=4
Description="<html><dd><p>where <code>string</code> is a list of block types to be tagged with closing side comments.  By default, all code block types preceded by a keyword or label (such as <code>if</code>, <code>sub</code>, and so on) will be tagged.  The <strong>-cscl</strong> command changes the default list to be any selected block types; see <a href=#specifying_block_types>Specifying Block Types</a>. For example, the following command requests that only <code>sub</code>'s, labels, <code>BEGIN</code>, and <code>END</code> blocks be affected by any <strong>-csc</strong> or <strong>-dcsc</strong> operation:</p></dd><dd><pre>\n   -cscl=&quot;sub : BEGIN END&quot;</pre></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Closing%20Side%20Comment%20Maximum%20Text]
CallName="--closing-side-comment-maximum-text="
Category=4
Description="<html><dd><p>The text appended to certain block types, such as an <code>if</code> block, is whatever lies between the keyword introducing the block, such as <code>if</code>, and the opening brace.  Since this might be too much text for a side comment, there needs to be a limit, and that is the purpose of this parameter.  The default value is <code>n=20</code>, meaning that no additional tokens will be appended to this text after its length reaches 20 characters.  Omitted text is indicated with <code>...</code>.  (Tokens, including sub names, are never truncated, however, so actual lengths may exceed this).  To illustrate, in the above example, the appended text of the first block is <code> ( !defined( $_[0] )...</code>.  The existing limit of <code>n=20</code> caused this text to be truncated, as indicated by the <code>...</code>.</p></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=20
ValueDefault=20

[Closing%20Side%20Comment%20Prefix]
CallName="--closing-side-comment-prefix="
Category=4
Description="<html><dd><p>where string is the prefix used before the name of the block type.  The default prefix, shown above, is <code>## end</code>.  This string will be added to closing side comments, and it will also be used to recognize them in order to update, delete, and format them.  Any comment identified as a closing side comment will be placed just a single space to the right of its closing brace.</p></dd></html>"
EditorType=string
Enabled=false
Value=## end
ValueDefault=## end

[Closing%20Side%20Comment%20Warnings]
Category=4
Description="<html><dd><p>This parameter is intended to help make the initial transition to the use of closing side comments.  It causes two things to happen if a closing side comment replaces an existing, different closing side comment:  first, an error message will be issued, and second, the original side comment will be placed alone on a new specially marked comment line for later attention.</p></dd><dd><p>The intent is to avoid clobbering existing hand-written side comments which happen to match the pattern of closing side comments. This flag should only be needed on the first run with <strong>-csc</strong>.</p></dd></html>"
EditorType=boolean
TrueFalse=--closing-side-comment-warnings|
Value=0
ValueDefault=0

[Closing%20Side%20Comments]
Category=4
Choices=-csc|-dcsc
ChoicesReadable=Add Closing Side Comments|Delete Closing Side Comments
Description="<html><dd><p>A closing side comment is a special comment which perltidy can automatically create and place after the closing brace of a code block. They can be useful for code maintenance and debugging.  The command <strong>-csc</strong> (or <strong>--closing-side-comments</strong>) adds or updates closing side comments.  For example, here is a small code snippet</p></dd><dd><pre>\n        sub message {\n            if ( !defined( $_[0] ) ) {\n                print(&quot;Hello, World\n&quot;);\n            }\n            else {\n                print( $_[0], &quot;\n&quot; );\n            }\n        }</pre></dd><dd><p>And here is the result of processing with <code>perltidy -csc</code>:</p></dd><dd><pre>\n        sub message {\n            if ( !defined( $_[0] ) ) {\n                print(&quot;Hello, World\n&quot;);\n            }\n            else {\n                print( $_[0], &quot;\n&quot; );\n            }\n        } ## end sub message</pre></dd><dd><p>A closing side comment was added for <code>sub message</code> in this case, but not for the <code>if</code> and <code>else</code> blocks, because they were below the 6 line cutoff limit for adding closing side comments.  This limit may be changed with the <strong>-csci</strong> command, described below.</p></dd><dd><p>The command <strong>-dcsc</strong> (or <strong>--delete-closing-side-comments</strong>) reverses this process and removes these comments.</p></dd><dd><p>Several commands are available to modify the behavior of these two basic commands, <strong>-csc</strong> and <strong>-dcsc</strong>:</p></dd></html>"
EditorType=multiple
Enabled=false
Value=0
ValueDefault=0

[Closing%20token%20indentation]
CallName="--closing-token-indentation="
Category=2
Description="<html>The <strong>-cti=n</strong> flag controls the indentation of a line beginning with a <code>)</code>, <code>]</code>, or a non-block <code>}</code>.  Such a line receives:</p></dd><dd><pre>\n -cti = 0 no extra indentation (default)\n -cti = 1 extra indentation such that the closing token\n        aligns with its opening token.\n -cti = 2 one extra indentation level if the line looks like:\n        );  or  ];  or  };\n -cti = 3 one extra indentation level always</pre></dd><dd><p>The flags <strong>-cti=1</strong> and <strong>-cti=2</strong> work well with the <strong>-lp</strong> flag (previous section).</p></dd><dd><pre>\n    # perltidy -lp -cti=1\n    @month_of_year = (\n                       'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                     );</pre></dd><dd><pre>\n    # perltidy -lp -cti=2\n    @month_of_year = (\n                       'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                       );</pre></dd><dd><p>These flags are merely hints to the formatter and they may not always be followed.  In particular, if -lp is not being used, the indentation for<strong>cti=1</strong> is constrained to be no more than one indentation level.</p></dd><dd><p>If desired, this control can be applied independently to each of theclosing container token types.  In fact, <strong>-cti=n</strong> is merely anabbreviation for <strong>-cpi=n -csbi=n -cbi=n</strong>, where:  <strong>-cpi</strong> or <strong>--closing-paren-indentation</strong> controls <strong>)</strong>'s,<strong>-csbi</strong> or <strong>--closing-square-bracket-indentation</strong> controls <strong>]</strong>'s, <strong>-cbi</strong> or <strong>--closing-brace-indentation</strong> controls non-block <strong>}</strong>'s.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=0
ValueDefault=0

[Continuation%20indentation]
CallName="--continuation-indentation="
Category=2
Description="<html>Continuation indentation is extra indentation spaces applied whena long line is broken.  The default is n=2, illustrated here:</p></dd><dd><pre> my $level =   # -ci=2   ( $max_index_to_go &gt;= 0 ) ? $levels_to_go[0] : $last_output_level;</pre></dd><dd><p>The same example, with n=0, is a little harder to read:</p></dd><dd><pre> my $level =   # -ci=0 ( $max_index_to_go &gt;= 0 ) ? $levels_to_go[0] : $last_output_level;</pre></dd><dd><p>The value given to <strong>-ci</strong> is also used by some commands when a small space is required.  Examples are commands for outdenting labels, <strong>-ola</strong>, and control keywords, <strong>-okw</strong>.</p></dd><dd><p>When default values are not used, it is suggested that the value <strong>n</strong> given with <strong>-ci=n</strong> be no more than about one-half of the number of spaces assigned to a full indentation level on the <strong>-i=n</strong> command.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=2
ValueDefault=2

[Cuddled%20elses]
Category=2
Description="<html>If you prefer cuddled elses, use the -ce flag.</html>"
EditorType=boolean
Enabled=false
TrueFalse=-ce|
Value=0
ValueDefault=0

[Delete%20old%20whitespace]
Category=3
Description="<html><dd><p>Setting this option allows perltidy to remove some old whitespace between characters, if necessary.  This is the default.  If you do not want any old whitespace removed, use <strong>-ndws</strong> or <strong>--nodelete-old-whitespace</strong>.</p></dd></html>"
EditorType=boolean
TrueFalse=--delete-old-whitespace|
Value=0
ValueDefault=0

[Delete%20semicolons]
Category=3
Description="<html><dd><p>Setting <strong>-dsm</strong> allows perltidy to delete extra semicolons which are simply empty statements.  This is the default, and may be deactivated with <strong>-ndsm</strong> or <strong>--nodelete-semicolons</strong>.  (Such semicolons are not deleted, however, if they would promote a side comment to a block comment).</p></dd></html>"
EditorType=boolean
TrueFalse=--delete-semicolons|
Value=0
ValueDefault=0

[Entab%20leading%20whitespace]
CallName="--entab-leading-whitespace="
Category=1
Description="This flag causes each <strong>n</strong> initial space characters to be replaced by one tab character.  Note that the integer <strong>n</strong> is completely independent of the integer specified for indentation parameter, <strong>-i=n</strong>.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=4
ValueDefault=4

[Fixed%20position%20side%20comment]
CallName="--fixed-position-side-comment="
Category=4
Description="<html><dd><p>This parameter tells perltidy to line up side comments in column number <strong>n</strong> whenever possible.  The default, n=0, is not do do this.</p></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=0
ValueDefault=0

[Freeze%20whitespace]
Category=3
Description="<html>This flag causes your original whitespace to remain unchanged, and causes the rest of the whitespace commands in this section, the Code Indentation section, and the Comment Control section to be ignored.</html>"
EditorType=boolean
TrueFalse=--freeze-whitespace|
Value=0
ValueDefault=0

[Gnu%20style]
Category=0
Description="<html><dd><p><strong>-gnu</strong> gives an approximation to the GNU Coding Standards (which do not apply to perl) as they are sometimes implemented.  At present, this style overrides the default style with the following parameters:</p></dd><dd><pre>\n    -lp -bl -noll -pt=2 -bt=2 -sbt=2 -icp</pre></dd></html>"
EditorType=boolean
Enabled=false
TrueFalse=--gnu-style|
Value=0
ValueDefault=0

[Hanging%20side%20comments]
Category=4
Description="<html><dd><p>By default, perltidy tries to identify and align ``hanging side comments'', which are something like this:</p></dd><dd><pre>\n        my $IGNORE = 0;    # This is a side comment\n                           # This is a hanging side comment\n                           # And so is this</pre></dd><dd><p>A comment is considered to be a hanging side comment if (1) it immediately follows a line with a side comment, or another hanging side comment, and (2) there is some leading whitespace on the line. To deactivate this feature, use <strong>-nhsc</strong> or <strong>--nohanging-side-comments</strong>. If block comments are preceded by a blank line, or have no leading whitespace, they will not be mistaken as hanging side comments.</p></dd></html>"
EditorType=boolean
TrueFalse=-hsc|-nhsc
Value=0
ValueDefault=0

[Indent%20block%20comments]
Category=4
Description="<html><p>Block comments normally look best when they are indented to the same level as the code which follows them.  This is the default behavior, but you may use <strong>-nibc</strong> to keep block comments left-justified.  Here is an example:</p></dd><dd><pre>\n             # this comment is indented      (-ibc, default)\n             if ($task) { yyy(); }</pre></dd><dd><p>The alternative is <strong>-nibc</strong>:</p></dd><dd><pre>\n # this comment is not indented              (-nibc)\n             if ($task) { yyy(); }</pre></dd><dd><p>See also the next item, <strong>-isbc</strong>, as well as <strong>-sbc</strong>, for other ways to have some indented and some outdented block comments.</p></dd></html>"
EditorType=boolean
TrueFalse=-ibc|-nibc
Value=1
ValueDefault=1

[Indent%20closing%20brace]
Category=2
Description="<html>The <strong>-icb</strong> option gives one extra level of indentation to a brace which terminates a code block .  For example,</p></dd><dd><pre>\n        if ($task) {\n            yyy();\n            }    # -icb\n        else {\n            zzz();\n            }</pre></dd><dd><p>The default is not to do this, indicated by <strong>-nicb</strong>.</html>"
EditorType=boolean
TrueFalse=--indent-closing-brace|
Value=0
ValueDefault=0

[Indent%20closing%20paren]
Category=2
Description="<html>The <strong>-icp</strong> flag is equivalent to<strong>-cti=2</strong>, described in the previous section.  The <strong>-nicp</strong> flag is equivalent <strong>-cti=0</strong>.  They are included for backwards compatability.</html>"
EditorType=boolean
TrueFalse=--indent-closing-paren|
Value=0
ValueDefault=0

[Indent%20columns]
CallName="--indent-columns="
Category=1
Description="<html>Use n columns per indentation level (default n=4).</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=4
ValueDefault=4

[Indent%20only]
Category=1
Description="<html>This flag is used to deactivate all formatting and line break changes. When it is in effect, the only change to the script will be indentation. And any flags controlling whitespace and newlines will be ignored. You might want to use this if you are perfectly happy with your whitespace and line breaks, and merely want perltidy to handle the indentation. (This also speeds up perltidy by well over a factor of two, so it might be useful when perltidy is merely being used to help find a brace error in a large script).</p></dd><dd><p>Setting this flag is equivalent to setting <strong>--freeze-newlines</strong> and<strong>--freeze-whitespace</strong>.</html>"
EditorType=boolean
Enabled=false
TrueFalse=--indent-only|
Value=0
ValueDefault=0

[Indent%20spaced%20block%20comments]
Category=4
Description="<html><dd><p>If there is no leading space on the line, then the comment will not be indented, and otherwise it may be.</p></dd><dd><p>If both <strong>-ibc</strong> and <strong>-isbc</strong> are set, then <strong>-isbc</strong> takes priority.</p></dd></html>"
EditorType=boolean
TrueFalse=-isbc|
Value=0
ValueDefault=0

[List%20indentation]
Category=2
Description="<html>By default, perltidy indents lists with 4 spaces, or whatever value is specified with <strong>-i=n</strong>.  Here is a small list formatted in this way:</p></dd><dd><pre>\n    # perltidy (default)\n    @month_of_year = (\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    );</pre></dd><dd><p>Use the <strong>-lp</strong> flag to add extra indentation to cause the data to begin past the opening parentheses of a sub call or list, or opening square bracket of an anonymous array, or opening curly brace of an anonymous hash.  With this option, the above list would become:</p></dd><dd><pre>\n    # perltidy -lp\n    @month_of_year = (\n                       'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    );</pre></dd><dd><p>If the available line length (see <strong>-l=n</strong> ) does not permit this much space, perltidy will use less.   For alternate placement of the closing paren, see the next section.</p></dd><dd><p>This option has no effect on code BLOCKS, such as if/then/else blocks, which always use whatever is specified with <strong>-i=n</strong>.  Also, the existence of line breaks and/or block comments between the opening and closing parens may cause perltidy to temporarily revert to its default method.</p></dd><dd><p>Note: The <strong>-lp</strong> option may not be used together with the <strong>-t</strong> tabs option. It may, however, be used with the <strong>-et=n</strong> tab method.</p></dd><dd><p>In addition, any parameter which significantly restricts the ability of perltidy to choose newlines will conflict with <strong>-lp</strong> and will cause <strong>-lp</strong> to be deactivated.  These include <strong>-io</strong>, <strong>-fnl</strong>, <strong>-nanl</strong>, and <strong>-ndnl</strong>.  The reason is that the <strong>-lp</strong> indentation style can require the careful coordination of an arbitrary number of break points in hierarchical lists, and these flags may prevent that.</html>"
EditorType=boolean
TrueFalse=--line-up-parentheses|
Value=0
ValueDefault=0

[Maximum%20line%20length]
CallName="--maximum-line-length="
Category=1
Description="<html>The default maximum line length is n=80 characters.  Perltidy will try to find line break points to keep lines below this length. However, long quotes and side comments may cause lines to exceed this length. Setting <strong>-l=0</strong> is equivalent to setting <strong>-l=(a large number)</strong>.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=80
ValueDefault=80

[Minimum%20space%20to%20comment]
CallName="--minimum-space-to-comment="
Category=4
Description="<html><dd><p>Side comments look best when lined up several spaces to the right of code.  Perltidy will try to keep comments at least n spaces to the right.  The default is n=4 spaces.</p></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=4
ValueDefault=4

[Nospace%20after%20keyword]
CallName="--nospace-after-keyword="
Category=3
Description="<html><dd><p>When an opening paren follows a Perl keyword, no space is introduced after the keyword, unless it is (by default) one of these:</p></dd><dd><pre>\n   my local our and or eq ne if else elsif until unless \n   while for foreach return switch case given when</pre></dd><dd><p>These defaults can be modified with two commands:</p></dd><dd><p><strong>-sak=s</strong>  or <strong>--space-after-keyword=s</strong>  adds keywords.</p></dd><dd><p><strong>-nsak=s</strong>  or <strong>--nospace-after-keyword=s</strong>  removes keywords.</p></dd><dd><p>where <strong>s</strong> is a list of keywords (in quotes if necessary).  For example,</p></dd><dd><pre>\n  my ( $a, $b, $c ) = @_;    # default\n  my( $a, $b, $c ) = @_;     # -nsak=&quot;my local our&quot;</pre></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Nowant%20left%20space]
CallName="--nowant-left-space="
Category=3
Description="<html><dd><p>For those who want more detailed control over the whitespace around tokens, there are four parameters which can directly modify the default whitespace rules built into perltidy for any token.  They are:</p></dd><dd><p><strong>-wls=s</strong> or <strong>--want-left-space=s</strong>,</p></dd><dd><p><strong>-nwls=s</strong> or <strong>--nowant-left-space=s</strong>,</p></dd><dd><p><strong>-wrs=s</strong> or <strong>--want-right-space=s</strong>,</p></dd><dd><p><strong>-nwrs=s</strong> or <strong>--nowant-right-space=s</strong>.</p></dd><dd><p>These parameters are each followed by a quoted string, <strong>s</strong>, containing a list of token types.  No more than one of each of these parameters should be specified, because repeating a command-line parameter always overwrites the previous one before perltidy ever sees it.</p></dd><dd><p>To illustrate how these are used, suppose it is desired that there be no space on either side of the token types <strong>= + - / *</strong>.  The following two parameters would specify this desire:</p></dd><dd><pre>\n  -nwls=&quot;= + - / *&quot;    -nwrs=&quot;= + - / *&quot;</pre></dd><dd><p>(Note that the token types are in quotes, and that they are separated by spaces).  With these modified whitespace rules, the following line of math:</p></dd><dd><pre>\n  $root = -$b + sqrt( $b * $b - 4. * $a * $c ) / ( 2. * $a );</pre></dd><dd><p>becomes this:</p></dd><dd><pre>\n  $root=-$b+sqrt( $b*$b-4.*$a*$c )/( 2.*$a );</pre></dd><dd><p>These parameters should be considered to be hints to perltidy rather than fixed rules, because perltidy must try to resolve conflicts that arise between them and all of the other rules that it uses.  One conflict that can arise is if, between two tokens, the left token wants a space and the right one doesn't.  In this case, the token not wanting a space takes priority.</p></dd><dd><p>It is necessary to have a list of all token types in order to create this type of input.  Such a list can be obtained by the command <strong>--dump-token-types</strong>.  Also try the <strong>-D</strong> flag on a short snippet of code and look at the .DEBUG file to see the tokenization.</p></dd><dd><p><strong>WARNING</strong> Be sure to put these tokens in quotes to avoid having them misinterpreted by your command shell.</p></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Nowant%20right%20space]
CallName="--nowant-right-space="
Category=3
Description="<html><dd><p>For those who want more detailed control over the whitespace around tokens, there are four parameters which can directly modify the default whitespace rules built into perltidy for any token.  They are:</p></dd><dd><p><strong>-wls=s</strong> or <strong>--want-left-space=s</strong>,</p></dd><dd><p><strong>-nwls=s</strong> or <strong>--nowant-left-space=s</strong>,</p></dd><dd><p><strong>-wrs=s</strong> or <strong>--want-right-space=s</strong>,</p></dd><dd><p><strong>-nwrs=s</strong> or <strong>--nowant-right-space=s</strong>.</p></dd><dd><p>These parameters are each followed by a quoted string, <strong>s</strong>, containing a list of token types.  No more than one of each of these parameters should be specified, because repeating a command-line parameter always overwrites the previous one before perltidy ever sees it.</p></dd><dd><p>To illustrate how these are used, suppose it is desired that there be no space on either side of the token types <strong>= + - / *</strong>.  The following two parameters would specify this desire:</p></dd><dd><pre>\n  -nwls=&quot;= + - / *&quot;    -nwrs=&quot;= + - / *&quot;</pre></dd><dd><p>(Note that the token types are in quotes, and that they are separated by spaces).  With these modified whitespace rules, the following line of math:</p></dd><dd><pre>\n  $root = -$b + sqrt( $b * $b - 4. * $a * $c ) / ( 2. * $a );</pre></dd><dd><p>becomes this:</p></dd><dd><pre>\n  $root=-$b+sqrt( $b*$b-4.*$a*$c )/( 2.*$a );</pre></dd><dd><p>These parameters should be considered to be hints to perltidy rather than fixed rules, because perltidy must try to resolve conflicts that arise between them and all of the other rules that it uses.  One conflict that can arise is if, between two tokens, the left token wants a space and the right one doesn't.  In this case, the token not wanting a space takes priority.</p></dd><dd><p>It is necessary to have a list of all token types in order to create this type of input.  Such a list can be obtained by the command <strong>--dump-token-types</strong>.  Also try the <strong>-D</strong> flag on a short snippet of code and look at the .DEBUG file to see the tokenization.</p></dd><dd><p><strong>WARNING</strong> Be sure to put these tokens in quotes to avoid having them misinterpreted by your command shell.</p></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Outdent%20keyword%20list]
CallName="--outdent-keyword-list="
Category=2
Description="<html>This command can be used to change the keywords which are outdented with the <strong>-okw</strong> command.  The parameter <strong>string</strong> is a required list of perl keywords, which should be placed in quotes if there are more than one. By itself, it does not cause any outdenting to occur, so the <strong>-okw</strong> command is still required.</p></dd><dd><p>For example, the commands <code>-okwl=&quot;next last redo goto&quot; -okw</code> will cause those four keywords to be outdented.  It is probably simplest to place any <strong>-okwl</strong> command in a <em>.perltidyrc</em> file.</html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Outdent%20long%20comments]
Category=4
Description="<html><dd><p>When <strong>-olc</strong> is set, lines which are full-line (block) comments longer than the value <strong>maximum-line-length</strong> will have their indentation removed.  This is the default; use <strong>-nolc</strong> to prevent outdenting.</p></dd></html>"
EditorType=boolean
TrueFalse=-olc|-nolc
Value=1
ValueDefault=1

[Outdent%20long%20lines]
Category=2
Description="<html>This command is equivalent to <strong>--outdent-long-quotes</strong> and <strong>--outdent-long-comments</strong>, and it is included for compatibility with previous versions of perltidy.  The negation of this also works, <strong>-noll</strong> or <strong>--nooutdent-long-lines</strong>, and is equivalent to setting <strong>-nolq</strong> and <strong>-nolc</strong>.</html>"
EditorType=boolean
TrueFalse=--outdent-long-lines|
Value=0
ValueDefault=0

[Outdent%20long%20quotes]
Category=2
Description="<html>When <strong>-olq</strong> is set, lines which is a quoted string longer than the value <strong>maximum-line-length</strong> will have their indentation removed to make them more readable.  This is the default.  To prevent such out-denting, use <strong>-nolq</strong> or <strong>--nooutdent-long-lines</strong>.</html>"
EditorType=boolean
TrueFalse=--outdent-long-quotes|
Value=0
ValueDefault=0

[Outdenting%20Keywords]
Category=2
Description="<html>The command <strong>-okw</strong> will will cause certain leading control keywords to be outdented by 2 spaces (or whatever <strong>-ci</strong> has been set to), if possible.  By default, these keywords are <code>redo</code>, <code>next</code>, <code>last</code>, <code>goto</code>, and <code>return</code>.  The intention is to make these control keywords easier to see.  To change this list of keywords being outdented, see the next section.</p></dd><dd><p>For example, using <code>perltidy -okw</code> on the previous example gives:</p></dd><dd><pre>\n        my $i;\n      LOOP: while ( $i = &lt;FOTOS&gt; ) {\n            chomp($i);\n          next unless $i;\n            fixit($i);\n        }</pre></dd><dd><p>The default is not to do this.</html>"
EditorType=boolean
TrueFalse=--outdent-keywords|
Value=0
ValueDefault=0

[Outdenting%20Labels]
Category=2
Description="<html>This command will cause labels to be outdented by 2 spaces (or whatever <strong>-ci</strong> has been set to), if possible.  This is the default.  For example:</p></dd><dd><pre>\n        my $i;\n      LOOP: while ( $i = &lt;FOTOS&gt; ) {\n            chomp($i);\n            next unless $i;\n            fixit($i);\n        }</pre></dd><dd><p>Use <strong>-nola</strong> to not outdent labels.</html>"
EditorType=boolean
TrueFalse=--outdent-labels|
Value=0
ValueDefault=0

[Output%20line%20ending]
Category=1
Choices="--output-line-ending=win|--output-line-ending=dos|--output-line-ending=unix|--output-line-ending=mac"
ChoicesReadable=Output line ending Windows|Output line ending Dos|Output line ending Unix|Output line ending Mac
Description="<html>where s=<code>win</code>, <code>dos</code>, <code>unix</code>, or <code>mac</code>.  This flag tells perltidy to output line endings for a specific system.  Normally, perltidy writes files with the line separator character of the host system.  The <code>win</code> and <code>dos</code> flags have an identical result.</html>"
EditorType=multiple
Enabled=false
Value=1
ValueDefault=-1

[Paren%20tightness]
CallName="--paren-tightness="
Category=3
Description="<html><p>The <strong>-pt=n</strong> or <strong>--paren-tightness=n</strong> parameter controls the space within parens.  The example below shows the effect of the three possible values, 0, 1, and 2:</p></dd><dd><pre>\n if ( ( my $len_tab = length( $tabstr ) ) &gt; 0 ) {  # -pt=0\n if ( ( my $len_tab = length($tabstr) ) &gt; 0 ) {    # -pt=1 (default)\n if ((my $len_tab = length($tabstr)) &gt; 0) {        # -pt=2</pre></dd><dd><p>When n is 0, there is always a space to the right of a '(' and to the left of a ')'.  For n=2 there is never a space.  For n=1, the default, there is a space unless the quantity within the parens is a single token, such as an identifier or quoted string.</html>"
EditorType=numeric
Enabled=false
MaxVal=2
MinVal=0
Value=1
ValueDefault=1

[Perl%20best%20practices]
Category=0
Description="<html><dd><p><strong>-pbp</strong> is an abbreviation for the parameters in the book <strong>Perl Best Practices</strong> by Damian Conway:</p></dd><dd><pre>\n    -l=78 -i=4 -ci=4 -st -se -vt=2 -cti=0 -pt=1 -bt=1 -sbt=1 -bbt=1 -nsfs -nolq\n    -wbb=&quot;% + - * / x != == &gt;= &lt;= =~ !~ &lt; &gt; | &amp; = \n          **= += *= &amp;= &lt;&lt;= &amp;&amp;= -= /= |= &gt;&gt;= ||= //= .= %= ^= x=&quot;</pre></dd><dd><p>Note that the -st and -se flags make perltidy act as a filter on one file only. These can be overridden with -nst and -nse if necessary.</p></dd></html>"
EditorType=boolean
Enabled=false
TrueFalse=--perl-best-practices --nostandard-output|
Value=0
ValueDefault=0

[Perl%20syntax%20check%20flags]
CallName="--perl-syntax-check-flags="
Category=1
Description="<html>When perl is invoked to check syntax, the normal flags are <code>-c -T</code>.  In addition, if the <strong>-x</strong> flag is given to perltidy, then perl will also be passed a <strong>-x</strong> flag.  It should not normally be necessary to change these flags, but it can be done with the <strong>-pscf=s</strong> flag.  For example, if the taint flag, <code>-T</code>, is not wanted, the flag could be set to be just <strong>-pscf=-c</strong>.</p></dd><dd><p>Perltidy will pass your string to perl with the exception that it willadd a <strong>-c</strong> and <strong>-x</strong> if appropriate.  The <em>.LOG</em> file will show exactly what flags were passed to perl.</html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Preserve%20line%20endings]
Category=1
Description="<html>This flag tells perltidy to write its output files with the same line endings as the input file, if possible.  It should work for <strong>dos</strong>, <strong>unix</strong>, and <strong>mac</strong> line endings.  It will only work if perltidy input comes from a filename (rather than stdin, for example). If perltidy has trouble determining the input file line ending, it will revert to the default behavior of using the line ending of the host system.</html>"
EditorType=boolean
Enabled=false
TrueFalse=--preserve-line-endings|
Value=0
ValueDefault=0

[Space%20after%20keyword]
CallName="--space-after-keyword="
Category=3
Description="<html><dd><p>When an opening paren follows a Perl keyword, no space is introduced after the keyword, unless it is (by default) one of these:</p></dd><dd><pre>\n   my local our and or eq ne if else elsif until unless \n   while for foreach return switch case given when</pre></dd><dd><p>These defaults can be modified with two commands:</p></dd><dd><p><strong>-sak=s</strong>  or <strong>--space-after-keyword=s</strong>  adds keywords.</p></dd><dd><p><strong>-nsak=s</strong>  or <strong>--nospace-after-keyword=s</strong>  removes keywords.</p></dd><dd><p>where <strong>s</strong> is a list of keywords (in quotes if necessary).  For example,</p></dd><dd><pre>\n  my ( $a, $b, $c ) = @_;    # default\n  my( $a, $b, $c ) = @_;     # -nsak=&quot;my local our&quot;</pre></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Space%20for%20semicolon]
Category=3
Description="<html><dd><p>Semicolons within <strong>for</strong> loops may sometimes be hard to see, particularly when commas are also present.  This option places spaces on both sides of these special semicolons, and is the default.  Use <strong>-nsfs</strong> or <strong>--nospace-for-semicolon</strong> to deactivate it.</p></dd><dd><pre>\n for ( @a = @$ap, $u = shift @a ; @a ; $u = $v ) {  # -sfs (default)\n for ( @a = @$ap, $u = shift @a; @a; $u = $v ) {    # -nsfs</pre></dd></html>"
EditorType=boolean
TrueFalse=--space-for-semicolon|
Value=0
ValueDefault=0

[Space%20function%20paren]
Category=3
Description="<html><dd><p>When an opening paren follows a function the default is not to introduce a space.  To cause a space to be introduced use:</p></dd><dd><p><strong>-sfp</strong>  or <strong>--space-function-paren</strong></p></dd><dd><pre>\n  myfunc( $a, $b, $c );    # default \n  myfunc ( $a, $b, $c );   # -sfp</pre></dd><dd><p>You will probably also want to use the flag <strong>-skp</strong> (previous item) too.</p></dd></html>"
EditorType=boolean
TrueFalse=--space-function-paren|
Value=0
ValueDefault=0

[Space%20keyword%20paren]
Category=3
Description="<html><dd><p>When an opening paren follows a function or keyword, no space is introduced after the keyword except for the keywords noted in the previous item.  To always put a space between a function or keyword and its opening paren, use the command:</p></dd><dd><p><strong>-skp</strong>  or <strong>--space-keyword-paren</strong></p></dd><dd><p>You will probably also want to use the flag <strong>-sfp</strong> (next item) too.</p></dd></html>"
EditorType=boolean
TrueFalse=--space-keyword-paren|
Value=0
ValueDefault=0

[Space%20terminal%20semicolon]
Category=3
Description="<html><p>Some programmers prefer a space before all terminal semicolons. The default is for no such space, and is indicated with <strong>-nsts</strong> or <strong>--nospace-terminal-semicolon</strong>.</p></dd><dd><pre>\n        $i = 1 ;     #  -sts\n        $i = 1;      #  -nsts   (default)</pre></dd></html>"
EditorType=boolean
TrueFalse=--space-terminal-semicolon|
Value=0
ValueDefault=0

[Square%20bracket%20tightness]
CallName="--square-bracket-tightness="
Category=3
Description="<html><p>Likewise, the parameter <strong>-sbt=n</strong> or <strong>--square-bracket-tightness=n</strong> controls the space within square brackets, as illustrated below.</p></dd><dd><pre>\n $width = $col[ $j + $k ] - $col[ $j ];  # -sbt=0\n $width = $col[ $j + $k ] - $col[$j];    # -sbt=1 (default)\n $width = $col[$j + $k] - $col[$j];      # -sbt=2</pre></dd></html>"
EditorType=numeric
Enabled=false
MaxVal=2
MinVal=0
Value=1
ValueDefault=1

[Starting%20indentation%20level]
CallName="--starting-indentation-level="
Category=2
Description="<html>By default, perltidy examines the input file and tries to determine the starting indentation level.  While it is often zero, it may not be zero for a code snippet being sent from an editing session.  If the default method does not work correctly, or you want to change the starting level, use <strong>-sil=n</strong>, to force the starting level to be n.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=0
ValueDefault=0

[Static%20Block%20Comment%20Outdent]
Category=4
Description="<html><dd><p>The command <strong>-osbc</strong> will will cause static block comments to be outdented by 2 spaces (or whatever <strong>-ci=n</strong> has been set to), if possible.</p></dd></html>"
EditorType=boolean
TrueFalse=-osbc|
Value=0
ValueDefault=0

[Static%20Block%20Comment%20Prefix]
CallName="--static-block-comment-prefix="
Category=4
Description="<html><dd><p>This parameter defines the prefix used to identify static block comments when the <strong>-sbc</strong> parameter is set.  The default prefix is <code>##</code>, corresponding to <code>-sbcp=##</code>.  The prefix is actually part of a perl pattern used to match lines and it must either begin with <code>#</code> or <code>^#</code>.  In the first case a prefix ^* will be added to match any leading whitespace, while in the second case the pattern will match only comments with no leading whitespace.  For example, to identify all comments as static block comments, one would use <code>-sbcp=#</code>. To identify all left-adjusted comments as static block comments, use <code>-sbcp='^#'</code>.</p></dd><dd><p>Please note that <strong>-sbcp</strong> merely defines the pattern used to identify static block comments; it will not be used unless the switch <strong>-sbc</strong> is set.  Also, please be aware that since this string is used in a perl regular expression which identifies these comments, it must enable a valid regular expression to be formed.</p></dd><dd><p>A pattern which can be useful is:</p></dd><dd><pre>\n    -sbcp=^#{2,}[^#]</pre></dd><dd><p>This pattern requires a static block comment to have at least one character which is neither a # nor a space.  It allows a line containing only '#' characters to be rejected as a static block comment.  Such lines are often used at the start and end of header information in subroutines and should not be separated from the intervening comments, which typically begin with just a single '#'.</p></dd></html>"
EditorType=string
Enabled=false
Value=##
ValueDefault=##

[Static%20Block%20Comments]
Category=4
Description="<html><dd><p>Static block comments are block comments with a special leading pattern, <code>##</code> by default, which will be treated slightly differently from other block comments.  They effectively behave as if they had glue along their left and top edges, because they stick to the left edge and previous line when there is no blank spaces in those places.  This option is particularly useful for controlling how commented code is displayed.</p></dd><dl><dt><strong><a name=item__2dsbc_2c__2d_2dstatic_2dblock_2dcomments><strong>-sbc</strong>, <strong>--static-block-comments</strong></a></strong><dd><p>When <strong>-sbc</strong> is used, a block comment with a special leading pattern, <code>##</code> by default, will be treated specially.</p></dd><dd><p>Comments so identified  are treated as follows:</p></dd><ul><li><p>If there is no leading space on the line, then the comment will not be indented, and otherwise it may be,</p></li><li><p>no new blank line will be inserted before such a comment, and</p></li><li><p>such a comment will never become a hanging side comment.</p></li></ul><p>For example, assuming <code>@month_of_year</code> is left-adjusted:</p><pre>\n    @month_of_year = (    # -sbc (default)\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',\n    ##  'Dec', 'Nov'\n        'Nov', 'Dec');</pre><p>Without this convention, the above code would become</p><pre>\n    @month_of_year = (   # -nsbc\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',\n  \n        ##  'Dec', 'Nov'\n        'Nov', 'Dec'\n    );</pre> <p>which is not as clear. The default is to use <strong>-sbc</strong>.  This may be deactivated with <strong>-nsbc</strong>.</p></html>"
EditorType=boolean
TrueFalse=-sbc|-nsbc
Value=1
ValueDefault=1

[Static%20Side%20Comment%20Prefix]
CallName="--static-side-comment-prefix="
Category=4
Description="<html><dd><p>This parameter defines the prefix used to identify static side comments when the <strong>-ssc</strong> parameter is set.  The default prefix is <code>##</code>, corresponding to <code>-sscp=##</code>.</p></dd><dd><p>Please note that <strong>-sscp</strong> merely defines the pattern used to identify static side comments; it will not be used unless the switch <strong>-ssc</strong> is set.  Also, note that this string is used in a perl regular expression which identifies these comments, so it must enable a valid regular expression to be formed.</p></dd></html>"
EditorType=string
Enabled=false
Value=##
ValueDefault=##

[Static%20Side%20Comments]
Category=4
Description="<html><dd><p>Static side comments are side comments with a special leading pattern. This option can be useful for controlling how commented code is displayed when it is a side comment.</p></dd><dl><dt><strong><a name=item__2dssc_2c__2d_2dstatic_2dside_2dcomments><strong>-ssc</strong>, <strong>--static-side-comments</strong></a></strong><dd><p>When <strong>-ssc</strong> is used, a side comment with a static leading pattern, which is <code>##</code> by default, will be be spaced only a single space from previous character, and it will not be vertically aligned with other side comments.</p></dd><dd><p>The default is <strong>-nssc</strong>.</p></dd></html>"
EditorType=boolean
TrueFalse=-ssc|-nssc
Value=0
ValueDefault=0

[Tabs]
Category=1
Description="<html>This flag causes one leading tab character to be inserted for each level of indentation.  Certain other features are incompatible with this option, and if these options are also given, then a warning message will be issued and this flag will be unset.  One example is the <strong>-lp</strong> option.</html>"
EditorType=boolean
TrueFalse=--tabs|
Value=0
ValueDefault=0

[Trimming%20whitespace%20around%20qw%20quotes]
Category=3
Choices=--trim-qw|--notrim-qw
ChoicesReadable=Trim whitespace|Do not trim whitespace
Description="<html><dd><p><strong>-tqw</strong> or <strong>--trim-qw</strong> provide the default behavior of trimming spaces around multi-line <code>qw</code> quotes and indenting them appropriately.</p></dd><dd><p><strong>-ntqw</strong> or <strong>--notrim-qw</strong> cause leading and trailing whitespace around multi-line <code>qw</code> quotes to be left unchanged.  This option will not normally be necessary, but was added for testing purposes, because in some versions of perl, trimming <code>qw</code> quotes changes the syntax tree.</p></dd></html>"
EditorType=multiple
Enabled=false
Value=0
ValueDefault=0

[Want%20left%20space]
CallName="--want-left-space="
Category=3
Description="<html><dd><p>For those who want more detailed control over the whitespace around tokens, there are four parameters which can directly modify the default whitespace rules built into perltidy for any token.  They are:</p></dd><dd><p><strong>-wls=s</strong> or <strong>--want-left-space=s</strong>,</p></dd><dd><p><strong>-nwls=s</strong> or <strong>--nowant-left-space=s</strong>,</p></dd><dd><p><strong>-wrs=s</strong> or <strong>--want-right-space=s</strong>,</p></dd><dd><p><strong>-nwrs=s</strong> or <strong>--nowant-right-space=s</strong>.</p></dd><dd><p>These parameters are each followed by a quoted string, <strong>s</strong>, containing a list of token types.  No more than one of each of these parameters should be specified, because repeating a command-line parameter always overwrites the previous one before perltidy ever sees it.</p></dd><dd><p>To illustrate how these are used, suppose it is desired that there be no space on either side of the token types <strong>= + - / *</strong>.  The following two parameters would specify this desire:</p></dd><dd><pre>\n  -nwls=&quot;= + - / *&quot;    -nwrs=&quot;= + - / *&quot;</pre></dd><dd><p>(Note that the token types are in quotes, and that they are separated by spaces).  With these modified whitespace rules, the following line of math:</p></dd><dd><pre>\n  $root = -$b + sqrt( $b * $b - 4. * $a * $c ) / ( 2. * $a );</pre></dd><dd><p>becomes this:</p></dd><dd><pre>\n  $root=-$b+sqrt( $b*$b-4.*$a*$c )/( 2.*$a );</pre></dd><dd><p>These parameters should be considered to be hints to perltidy rather than fixed rules, because perltidy must try to resolve conflicts that arise between them and all of the other rules that it uses.  One conflict that can arise is if, between two tokens, the left token wants a space and the right one doesn't.  In this case, the token not wanting a space takes priority.</p></dd><dd><p>It is necessary to have a list of all token types in order to create this type of input.  Such a list can be obtained by the command <strong>--dump-token-types</strong>.  Also try the <strong>-D</strong> flag on a short snippet of code and look at the .DEBUG file to see the tokenization.</p></dd><dd><p><strong>WARNING</strong> Be sure to put these tokens in quotes to avoid having them misinterpreted by your command shell.</p></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Want%20right%20space]
CallName=--want-right-space
Category=3
Description="<html><dd><p>For those who want more detailed control over the whitespace around tokens, there are four parameters which can directly modify the default whitespace rules built into perltidy for any token.  They are:</p></dd><dd><p><strong>-wls=s</strong> or <strong>--want-left-space=s</strong>,</p></dd><dd><p><strong>-nwls=s</strong> or <strong>--nowant-left-space=s</strong>,</p></dd><dd><p><strong>-wrs=s</strong> or <strong>--want-right-space=s</strong>,</p></dd><dd><p><strong>-nwrs=s</strong> or <strong>--nowant-right-space=s</strong>.</p></dd><dd><p>These parameters are each followed by a quoted string, <strong>s</strong>, containing a list of token types.  No more than one of each of these parameters should be specified, because repeating a command-line parameter always overwrites the previous one before perltidy ever sees it.</p></dd><dd><p>To illustrate how these are used, suppose it is desired that there be no space on either side of the token types <strong>= + - / *</strong>.  The following two parameters would specify this desire:</p></dd><dd><pre>\n  -nwls=&quot;= + - / *&quot;    -nwrs=&quot;= + - / *&quot;</pre></dd><dd><p>(Note that the token types are in quotes, and that they are separated by spaces).  With these modified whitespace rules, the following line of math:</p></dd><dd><pre>\n  $root = -$b + sqrt( $b * $b - 4. * $a * $c ) / ( 2. * $a );</pre></dd><dd><p>becomes this:</p></dd><dd><pre>\n  $root=-$b+sqrt( $b*$b-4.*$a*$c )/( 2.*$a );</pre></dd><dd><p>These parameters should be considered to be hints to perltidy rather than fixed rules, because perltidy must try to resolve conflicts that arise between them and all of the other rules that it uses.  One conflict that can arise is if, between two tokens, the left token wants a space and the right one doesn't.  In this case, the token not wanting a space takes priority.</p></dd><dd><p>It is necessary to have a list of all token types in order to create this type of input.  Such a list can be obtained by the command <strong>--dump-token-types</strong>.  Also try the <strong>-D</strong> flag on a short snippet of code and look at the .DEBUG file to see the tokenization.</p></dd><dd><p><strong>WARNING</strong> Be sure to put these tokens in quotes to avoid having them misinterpreted by your command shell.</p></dd></html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

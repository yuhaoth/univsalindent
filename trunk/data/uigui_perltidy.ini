[%20header]
categories=Basic Options|Code Indentation Control
cfgFileParameterEnding=cr
configFilename=perltidy.cfg
fileTypes=*.pl|*.pm
indenterFileName=perltidy
indenterName=Perltidy
inputFileName=indentinput
inputFileParameter=
outputFileName=indentoutput
outputFileParameter="-o="
parameterOrder=pio
showHelpParameter=-h
stringparaminquotes=false
useCfgFileParameter="-pro="
version=2007-05-24

[Check%20syntax]
Category=0
Description="<html>This flag causes perltidy to run <code>perl -c -T</code> to check syntax of input and output. (To change the flags passed to perl, see the next item, <strong>-pscf</strong>).  The results are written to the <em>.LOG</em> file, which will be saved if an error is detected in the output script.  The output script is not checked if the input script has a syntax error.  Perltidy does its own checking, but this option employs perl to get a ``second opinion''.</p></dd><dd><p>If perl reports errors in the input file, they will not be reported in the error output unless the <strong>--warning-output</strong> flag is given.</p></dd><dd><p>The default is <strong>not</strong> to do this type of syntax checking (although perltidy will still do as much self-checking as possible). The reason is that it causes all code in BEGIN blocks to be executed, for all modules being used, and this opens the door to security issues and infinite loops when running perltidy.</html>"
EditorType=boolean
Enabled=false
TrueFalse=--check-syntax|
Value=0
ValueDefault=0

[Cuddled%20elses]
Category=1
Description="<html>If you prefer cuddled elses, use the -ce flag.</html>"
EditorType=boolean
Enabled=false
TrueFalse=-ce|
Value=0
ValueDefault=0

[Entab%20leading%20whitespace]
CallName="--entab-leading-whitespace="
Category=0
Description="This flag causes each <strong>n</strong> initial space characters to be replaced by one tab character.  Note that the integer <strong>n</strong> is completely independent of the integer specified for indentation parameter, <strong>-i=n</strong>.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=4
ValueDefault=4

[Indent%20columns]
CallName="--indent-columns="
Category=0
Description="<html>Use n columns per indentation level (default n=4).</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=4
ValueDefault=4

[Indent%20only]
Category=0
Description="<html>This flag is used to deactivate all formatting and line break changes. When it is in effect, the only change to the script will be indentation. And any flags controlling whitespace and newlines will be ignored. You might want to use this if you are perfectly happy with your whitespace and line breaks, and merely want perltidy to handle the indentation. (This also speeds up perltidy by well over a factor of two, so it might be useful when perltidy is merely being used to help find a brace error in a large script).</p></dd><dd><p>Setting this flag is equivalent to setting <strong>--freeze-newlines</strong> and<strong>--freeze-whitespace</strong>.</html>"
EditorType=boolean
Enabled=false
TrueFalse=--indent-only|
Value=0
ValueDefault=0

[Maximum%20line%20length]
CallName="--maximum-line-length="
Category=0
Description="<html>The default maximum line length is n=80 characters.  Perltidy will try to find line break points to keep lines below this length. However, long quotes and side comments may cause lines to exceed this length. Setting <strong>-l=0</strong> is equivalent to setting <strong>-l=(a large number)</strong>.</html>"
EditorType=numeric
Enabled=false
MaxVal=1000
MinVal=0
Value=80
ValueDefault=80

[Output%20line%20ending]
Category=0
Choices="--output-line-ending=win|--output-line-ending=dos|--output-line-ending=unix|--output-line-ending=mac"
ChoicesReadable=Output line ending Windows|Output line ending Dos|Output line ending Unix|Output line ending Mac
Description="<html>where s=<code>win</code>, <code>dos</code>, <code>unix</code>, or <code>mac</code>.  This flag tells perltidy to output line endings for a specific system.  Normally, perltidy writes files with the line separator character of the host system.  The <code>win</code> and <code>dos</code> flags have an identical result.</html>"
EditorType=multiple
Enabled=false
Value=1
ValueDefault=-1

[Perl%20syntax%20check%20flags]
CallName="--perl-syntax-check-flags="
Category=0
Description="<html>When perl is invoked to check syntax, the normal flags are <code>-c -T</code>.  In addition, if the <strong>-x</strong> flag is given to perltidy, then perl will also be passed a <strong>-x</strong> flag.  It should not normally be necessary to change these flags, but it can be done with the <strong>-pscf=s</strong> flag.  For example, if the taint flag, <code>-T</code>, is not wanted, the flag could be set to be just <strong>-pscf=-c</strong>.</p></dd><dd><p>Perltidy will pass your string to perl with the exception that it willadd a <strong>-c</strong> and <strong>-x</strong> if appropriate.  The <em>.LOG</em> file will show exactly what flags were passed to perl.</html>"
EditorType=string
Enabled=false
Value=
ValueDefault=

[Preserve%20line%20endings]
Category=0
Description="<html>This flag tells perltidy to write its output files with the same line endings as the input file, if possible.  It should work for <strong>dos</strong>, <strong>unix</strong>, and <strong>mac</strong> line endings.  It will only work if perltidy input comes from a filename (rather than stdin, for example). If perltidy has trouble determining the input file line ending, it will revert to the default behavior of using the line ending of the host system.</html>"
EditorType=boolean
Enabled=false
TrueFalse=--preserve-line-endings|
Value=0
ValueDefault=0

[Tabs]
Category=0
Description="<html>This flag causes one leading tab character to be inserted for each level of indentation.  Certain other features are incompatible with this option, and if these options are also given, then a warning message will be issued and this flag will be unset.  One example is the <strong>-lp</strong> option.</html>"
EditorType=boolean
TrueFalse=--tabs|
Value=0
ValueDefault=0
